// <auto-generated />
using System;
using Filmothek.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Filmothek.Migrations
{
    [DbContext(typeof(VideoContext))]
    [Migration("20180910102251_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Filmothek.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Login");

                    b.Property<string>("Pw");

                    b.Property<short>("Rights");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Filmothek.Models.CustomerHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId");

                    b.Property<int>("MovieId");

                    b.Property<string>("Note");

                    b.Property<DateTime>("endDate");

                    b.Property<bool>("isBorrowing");

                    b.Property<DateTime>("startDate");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MovieId");

                    b.ToTable("CustomerHistory");
                });

            modelBuilder.Entity("Filmothek.Models.Moderator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Login");

                    b.Property<string>("Pw");

                    b.Property<short>("Rights");

                    b.HasKey("Id");

                    b.ToTable("Moderator");
                });

            modelBuilder.Entity("Filmothek.Models.ModeratorHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Activity");

                    b.Property<string>("Date");

                    b.Property<int>("ModeratorId");

                    b.HasKey("Id");

                    b.HasIndex("ModeratorId");

                    b.ToTable("ModeratorHistory");
                });

            modelBuilder.Entity("Filmothek.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<int>("FSK");

                    b.Property<string>("Genre");

                    b.Property<bool>("IsSeries");

                    b.Property<string>("Language");

                    b.Property<string>("LanguageDub");

                    b.Property<string>("LanguageSub");

                    b.Property<string>("Lenght");

                    b.Property<string>("MovieName");

                    b.Property<double>("Price");

                    b.Property<double>("Rating");

                    b.Property<string>("Release");

                    b.HasKey("Id");

                    b.ToTable("Movie");
                });

            modelBuilder.Entity("Filmothek.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankaccIBAN");

                    b.Property<string>("BankaccOwner");

                    b.Property<string>("CreditcardExpire");

                    b.Property<long>("CreditcardNumber");

                    b.Property<string>("CreditcardOwner");

                    b.Property<int>("CreditcardSecret");

                    b.Property<string>("CreditcardTyp");

                    b.Property<int>("CustomerId");

                    b.Property<string>("PaypalLogin");

                    b.Property<string>("PaypalPassword");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("Filmothek.Models.CustomerHistory", b =>
                {
                    b.HasOne("Filmothek.Models.Customer", "Customer")
                        .WithMany("CustomerHistory")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Filmothek.Models.Movie", "Movie")
                        .WithMany("CustomerHistory")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Filmothek.Models.ModeratorHistory", b =>
                {
                    b.HasOne("Filmothek.Models.Moderator", "Moderator")
                        .WithMany("ModeratorHistory")
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Filmothek.Models.PaymentMethod", b =>
                {
                    b.HasOne("Filmothek.Models.Customer", "Customer")
                        .WithOne("PaymentMethod")
                        .HasForeignKey("Filmothek.Models.PaymentMethod", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
